{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["OSMSearchResults","props","requestOSMData","position","userLat","coords","latitude","userLon","longitude","setState","NominatimJS","search","q","targetEntity","then","results","nearby","catch","error","console","log","errored","getGMapsLink","item","lat","lon","getItemNameDisplay","display_name","split","slice","sliceItemNameFrom","sliceItemNameTo","join","getItemDistanceDisplay","distanceFromUser","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","kilometers","acos","miles","toFixed","distance","state","getItemDisplay","navigator","geolocation","getCurrentPosition","this","length","className","displayName","map","result","key","osm_id","href","target","rel","React","Component","App","ReactGA","initialize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bba2800e.chunk.js","sourcesContent":["import React from \"react\";\nimport { NominatimJS } from \"nominatim-search\";\nimport ReactGA from \"react-ga\";\n\n// From: https://www.geodatasource.com/developers/javascript\n// Minor change to always return miles and kilometers as object\nfunction distance(lat1, lon1, lat2, lon2) {\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  } else {\n    var radlat1 = (Math.PI * lat1) / 180;\n    var radlat2 = (Math.PI * lat2) / 180;\n    var theta = lon1 - lon2;\n    var radtheta = (Math.PI * theta) / 180;\n    var dist =\n      Math.sin(radlat1) * Math.sin(radlat2) +\n      Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = (dist * 180) / Math.PI;\n    dist = dist * 60 * 1.1515;\n    var miles = dist;\n    var kilometers = dist * 1.609344;\n    return { miles: miles.toFixed(2), kilometers: kilometers.toFixed(2) };\n  }\n}\n\nclass OSMSearchResults extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { nearby: [], userLat: 0.0, userLon: 0.0, errored: false };\n  }\n  requestOSMData = (position) => {\n    // unpack user current location\n    var userLat = position.coords.latitude;\n    var userLon = position.coords.longitude;\n    this.setState({ userLat: userLat, userLon: userLon });\n\n    // request water fountains (drinking water) near user\n    NominatimJS.search({\n      q: `${this.props.targetEntity} near ${userLat}, ${userLon}`,\n    })\n      .then((results) => {\n        this.setState({ nearby: results });\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState({ errored: true });\n      });\n  };\n\n  getGMapsLink = (item) => {\n    return `https://www.google.com/maps/search/?api=1&query=${item.lat},${item.lon}`;\n  };\n\n  getItemNameDisplay = (item) => {\n    return item.display_name\n      .split(\", \")\n      .slice(this.props.sliceItemNameFrom, this.props.sliceItemNameTo)\n      .join(\", \");\n  };\n\n  getItemDistanceDisplay = (item) => {\n    var distanceFromUser = distance(\n      this.state.userLat,\n      this.state.userLon,\n      item.lat,\n      item.lon\n    );\n\n    return `${distanceFromUser.miles} miles away`;\n  };\n\n  getItemDisplay = (item) => {\n    return `${this.getItemNameDisplay(item)} -- ${this.getItemDistanceDisplay(\n      item\n    )}`;\n  };\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(this.requestOSMData);\n  }\n  render() {\n    if (this.state.nearby.length === 0) {\n      return (\n        <div className=\"osm-results-container\">\n          <h3>Nearby {this.props.displayName}:</h3>\n          <p>Loading...</p>\n        </div>\n      );\n    }\n    if (this.state.errored) {\n      return (\n        <div className=\"osm-results-container\">\n          <h3>Nearby {this.props.displayName}:</h3>\n          <p>Something went wrong...</p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"osm-results-container\">\n        <h3>Nearby {this.props.displayName}:</h3>\n        <ul>\n          {this.state.nearby.length > 0 &&\n            this.state.nearby.map((result) => (\n              // generate a google maps link for each nearby water fountain\n              <li key={result.osm_id}>\n                <a\n                  href={this.getGMapsLink(result)}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {this.getItemDisplay(result)}\n                </a>\n              </li>\n            ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  ReactGA.initialize(\"UA-108611658-3\");\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Out and About</h1>\n\n        <p>\n          Public amenities near you.\n          <br />\n          All links below route to Google Maps.\n        </p>\n      </header>\n      <div className=\"page-content\">\n        <div className=\"wrap-container\">\n          <OSMSearchResults\n            targetEntity=\"toilet\"\n            displayName=\"Restrooms\"\n            sliceItemNameFrom={1}\n            sliceItemNameTo={3}\n          />\n          <OSMSearchResults\n            targetEntity=\"drinking water\"\n            displayName=\"Water Fountains\"\n            sliceItemNameFrom={0}\n            sliceItemNameTo={2}\n          />\n        </div>\n        <footer>\n          <p>\n            Help make this better --{\" \"}\n            <a\n              href=\"https://github.com/JacksonMaxfield/out-and-about\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Contribute on Github!\n            </a>\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}